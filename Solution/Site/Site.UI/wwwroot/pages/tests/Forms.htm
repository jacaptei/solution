<template>
    <div>


				<el-space wrap :fill="true" style="max-width:400px" :size="30">
				
					<div class="s-input">
								<div>NOME <span>detalhe</span></div>
								<el-input v-model="client.name" placeholder=""></el-input>
					</div>

					<div class="s-input-required">
								<div>NOME <span>detalhe</span></div>
								<el-input v-model="client.name" placeholder="" style="border-color:orange"></el-input>
					</div>


					<div class="s-input-required">
								<div>NOME <span>detalhe</span></div>
								<q-radio keep-color color="orange" v-model="model" val="line"		size="xs"	label="Line" />
								<q-radio keep-color color="orange" v-model="model" val="rectangle"	size="xs"	label="Rectangle" />
								<q-radio keep-color color="orange" v-model="model" val="ellipse"	size="xs"	label="Ellipse" />
								<q-radio keep-color color="orange" v-model="model" val="polygon"	size="xs"	label="Polygon" />
					</div>






					<span></span>

					<q-select class="requierd-field" color="orange" outlined label-color="orange" v-model="model" :options="options" label="Label">
						<template v-slot:append>
							<q-icon name="fa fa-home" color="orange" ></q-icon>
						</template>
					</q-select>

					<q-select outlined v-model="model" :options="options" label="Label">
						<template v-slot:append>
							<q-icon name="fa fa-home" color="blue" ></q-icon>
						</template>
					</q-select>

					<q-input outlined v-model="$root.user.username" label="nome"	class="requierd-field" color="orange"></q-input>
					
					<q-input outlined v-model="$root.user.password" label="documento" ></q-input>

					<div>
						<q-radio	class="requierd-field" keep-color v-model="text"	val="orange" label="Orange"  color="orange"></q-radio>
						<q-checkbox class="requierd-field" keep-color v-model="valbool" label="Orange"  color="orange"></q-checkbox>
						<q-toggle	class="requierd-field" keep-color v-model="valbool" label="Orange"  color="orange"></q-toggle>
					</div>

					<q-option-group      v-model="text"      :options="options"      color="primary"></q-option-group>

					<q-btn-toggle style="max-width:400px" v-model="model" spread no-caps toggle-color="orange" color="white" text-color="black" :options="[{label: 'Option 1', value: 'one'},{label: 'Option 2', value: 'two'}]"   ></q-btn-toggle>

					<el-select v-model="model" class="m-2" placeholder="Select" size="large">
						<el-option
						  v-for="item in options"
						  :key="item.value"
						  :label="item.label"
						  :value="item.value"
						></el-option>
					</el-select>

					<el-input v-model="$root.user.username" placeholder="e-mail" style="width:240px;margin:6px"></el-input>
					
					<el-input v-model="$root.user.password" placeholder="senha" style="width:240px;margin:6px"></el-input>

			    </el-space>


    </div>

</template>




<script>
	module.exports = {

		name: 'Login',

		components: {

		},

		data: function () {
			return {
                client: this.$models.client(),
				valor:25000.5848512112,
				msg1:"ok1",
				msg2:"ok2",
				msgs:[],
				valbool:true,
				disable:true,
				isLoading:true,
                text:"",
                options:[{'label':'valor 1','value':'val1'},{'label':'valor 2','value':'val2'},{'label':'valor 3','value':'val3'}],
                model:{'label':'valor 1','value':'val1'}
			}
		}, computed: {

		},

		props: {

		},
		watch: {

		},
		created: function () {
			cclear();
			c("$q.$root.version = "+this.$root.$q.version);
            this.$root.SetTitle("Tests,PART I","fa fa-vial");
            //this.$root.NoTitler();
			this.msgs.push(this.msg1);
			this.msgs.push(this.msg2);
			//this.msgs[0] = this.msg1;

			//this.$alert("test message","Alert 22");
			//this.$confirm('Are you sure to close this dialog?').then(() => {c("Confirm OK");    }).catch(() => {      c("Confirm Error")    });
			c(this.$loading)
			//this.$loading.service({lock: true,text: 'Loading',background: 'rgba(0, 0, 0, 0.7)',});
    	    //setTimeout(() => {this.$loading.close(); this.$message({message: 'loaded',grouping: true,type: 'success', });}, 2000)
			
			this.Hi();
		},
		mounted() {
		},
		methods: {

			/*
				--https://element-plus.org/en-US/component/message-box.html#global-method
				Global method#
				If Element Plus is fully imported, it will add the following global methods for app.config.globalProperties: 
				$message, $msgbox, $alert, $confirm and $prompt. 
				So in a Vue instance you can call MessageBox like what we did in this page. The parameters are:

				$msgbox(options)
				$alert(message, title, options) or $alert(message, options)
				$confirm(message, title, options) or $confirm(message, options)
				$prompt(message, title, options) or $prompt(message, options)


			*/
					//<el-button type="primary" @click="$q.dialog({title: 'Alert',message: 'Some message'}).onOk(() => {$c('Q OK');}).onCancel(() => { $c('Q Cancel')}).onDismiss(() => {$c('Q both OK and Cancel')} )}"><i class="fa fa-edit"></i> Q Alert</el-button>
					//<el-button type="primary" @click="$q.dialog({title: 'Confirm',message: 'Would you like to turn on the wifi?',cancel: true,persistent: true}).onOk(() => {$c('Q >>>> OK'); }).onOk(() => { $c('Q >>>> second OK catcher'); }).onCancel(() => { $c('Q >>>> Cancel'); }).onDismiss(() => { $c('Q I am triggered on both OK and Cancel') ;     })    }"><i class="fa fa-edit"></i> Q Confirm</el-button>

			EConfirm(){
				this.$confirm(
					'Do you really want to delete  ?',
					"Confirmation",
					{
					  title:"Confirmação", //sobrescreve "Confirmation" que pode ser ocultado - idem para 'message'
					  confirmButtonText: "OK",
					  cancelButtonText: "Cancel",
					  cancelButtonType: "success",
					  showCancelButton: true,
					  type: "success"
					}
				  );
			},

			QAlert(){
				this.$q.dialog({title: 'Alert',message: 'Some message'}).onOk(() => { c('Q OK');}).onCancel(() => { c('Q Cancel')}).onDismiss(() => {c('Q both OK and Cancel')} );
			},

			QConfirm(){
				this.$q.dialog({title: 'Confirm',message: 'Would you like to turn on the wifi?',cancel: true,persistent: true}).onOk(() => {c('Q >>>> OK'); }).onOk(() => { c('Q >>>> second OK catcher'); }).onCancel(() => { c('Q >>>> Cancel'); }).onDismiss(() => { c('Q I am triggered on both OK and Cancel') ;     })  ;
			},

			Hi(){
				
				//this.$alert(msg, title, { dangerouslyUseHTMLString: true }).then(() => { }).catch(() => { alert("Não foi possível atender a requisição") });
				var i=22;
                var states=JSON.parse('[{"value":"AC","label":"AC - ACRE"},{"value":"AL","label":"AL - ALAGOAS"},{"value":"AM","label":"AM - AMAZONAS"},{"value":"AP","label":"AP - AMAPÁ"},{"value":"BA","label":"BA - BAHIA"},{"value":"CE","label":"CE - CEARÁ"},{"value":"DF","label":"DF - DISTRITO FEDERAL"},{"value":"ES","label":"ES - ESPÍRITO SANTO"},{"value":"GO","label":"GO - GOIÁS"},{"value":"MA","label":"MA - MARANHÃO"},{"value":"MG","label":"MG - MINAS GERAIS"},{"value":"MS","label":"MS - MATO GROSSO SUL "},{"value":"MT","label":"MT - MATO GROSSO"},{"value":"PA","label":"PA - PARÁ"},{"value":"PB","label":"PB - PARAÍBA"},{"value":"PE","label":"PE - PERNAMBUCO"},{"value":"PI","label":"PI - PIAUÍ"},{"value":"PR","label":"PR - PARANÁ"},{"value":"RJ","label":"RJ - RIO DE JANEIRO"},{"value":"RN","label":"RN - RIO GRANDE DO NORTE"},{"value":"RO","label":"RO - RONDÔNIA"},{"value":"RR","label":"RR - RORAIMA"},{"value":"RS","label":"RS - RIO GRANDE DO SUL"},{"value":"SC","label":"SC - SANTA CATARINA"},{"value":"SE","label":"SE - SERGIPE"},{"value":"SP","label":"SP - SÃO PAULO"},{"value":"TO","label":"TO - TOCANTINS"},{"value":"IT","label":"INTERNACIONAL"}]');

				//c(this.msg1);

				//c("state  = " ,states[i++].label )
				//c("states = " ,states)

				//cl("state  = ",states[i++].label )
				//cl("states = ",states)

				//ci("state  = ",states[i++].label )
				//ci("states = ",states)

				//cs("state  = ",states[i++].label )
				//cs("states = ",states)

				//cw("state  = ",states[i++].label )
				//cw("states = ",states)

				//ce("state  = ",states[i++].label )
				//ce("states = ",states)

				//c(this.$tools.states)

			}
		}

	}


</script>


<style scoped>
</style>


