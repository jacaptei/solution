<template>

    <div class="row">
        <div class="col-12">
            <q-tabs v-model="tab"
                    dense
                    no-caps
                    align="left"
                    narrow-indicator
                    class="text-grey"
                    active-color="primary"
                    indicator-color="primary">
                <q-tab name="distribuicao" icon="fa fa-chart-bar"  label="DISTRIBUIÇÃO" v-if="$root.usuario.god || $root.usuario.gestor" @click="UpdateChart()"></q-tab>
                <q-tab name="visita" icon="fa fa-calendar" label="VISITAS"></q-tab>
                <q-tab name="captacao" icon="fa fa-magnet" label="CAPTAÇÕES"></q-tab>
            </q-tabs>

            <el-row :gutter="20" v-if="view == 'request' ">
                <el-col :md="24">
                    <c-loading></c-loading>
                </el-col>
            </el-row>
            <el-row :gutter="20" v-else-if="view == 'fail' ">
                <el-col :md="24" style="width:100%;text-align:center;padding:40px;padding-left:0px">
                    <div class="title" style="color:var(--s-color-red)"><b><i class="fa fa-circle-xmark"></i> Falhou</b></div>
                    <br />Não foi possível obter solicitações,<br />favor tentar novamente.
                    <br /><br />
                    <q-btn color="white" text-color="orange-10" label="VOLTAR" @click="ShowView('form')" style="width:200px;"></q-btn>
                </el-col>
            </el-row>
            <el-row :gutter="20">
                <el-col :md="24" v-if="view == 'success' && tab == 'distribuicao' ">
                    <div style="float:right" v-if="$root.usuario.gestor || $root.usuario.god">
                        <el-select v-model="idAdminSelecionado" filterable placeholder="Todos" size="small" style="width:100%" @change="(idAdmin)=>{FiltrarPorAdmin(idAdmin)}">
                            <el-option v-for="admin in admins"
                                       :key="admin.id"
                                       :label="admin.nome"
                                       :value="admin.id">
                            </el-option>
                        </el-select>
                        <!--<div style="width:100%;height:3px;margin-top:2px;padding-bottom:-5px;background-color:var(--s-color-orange)" v-if="idAdminSelecionado > 0"></div>-->
                    </div>
                    <!--<div style="float:right;padding-right:20px">
                        <el-checkbox v-model="somenteAgendadas" label="Agendadas" @change=FiltrarPorAdmin(idAdminSelecionado)></el-checkbox>
                    </div>-->
                </el-col>
            </el-row>
            <el-row :gutter="20" id="solicitacoes">


                <el-col :md="24">

                    <q-tab-panels v-model="tab" animated v-else>


                        <q-tab-panel name="distribuicao">
                            <div>
                                <page_distribuicao ref="distribuicao" :solicitacoes="results"></page_distribuicao>
                            </div>
                        </q-tab-panel>



                        <q-tab-panel name="visita">
                            <div>
                                <page_visita ></page_visita>
                            </div>
                        </q-tab-panel>



                        <q-tab-panel name="captacao">
                            <div>
                                <page_captacao ></page_captacao>
                            </div>
                        </q-tab-panel>
                        


                    </q-tab-panels>

                </el-col>
            </el-row>
        </div>
    </div>
</template>



<script>
    module.exports = {

        name: 'JCAdminSolicitacaoVisitaIndex',

        components: {
            page_distribuicao:  LoadComponent("./pages/solicitacao/Distribuicao.htm"),
            page_captacao:      LoadComponent("./pages/solicitacao/Index-Captacao.htm"),
            page_visita:        LoadComponent("./pages/solicitacao/Index-Visita.htm")
        },

        data: function () {
            return {
                tab: null,
                view: "",
                messageSuccess: "",
                messageAlert: "",
                content: "",
                update: {
                    auto: true,
                    timeOptions: [{ value: 0, label: "Não atualizar" }, { value: 30000, label: "Atualizar a cada 30s" }, { value: 60000, label: "Atualizar a cada 1min" }, { value: 120000, label: "Atualizar a cada 2min" }, { value: 300000, label: "Atualizar a cada 5min" }, { value: 600000, label: "Atualizar a cada 10min" }, { value: 1200000, label: "Atualizar a cada 20min" }, { value: 1800000, label: "Atualizar a cada 30min" }, { value: 3600000, label: "Atualizar a cada 1h" }],
                    timeSelected: { value: 300000, label: "Atualizar a cada 5min" },
                    interval: null,
                    inBG: false
                },
                somenteAgendadas: false,
                carregandoCEP: false,
                carregandoEstados: false,
                carregandoCidades: false,
                carregandoBairros: false,
                cep: {
                    numero: "",
                    estado: "",
                    cidade: "",
                    logradouro: ""
                },
                opcoes: {
                    estados: this.$root.localidade.estados,
                    cidades: [],
                    bairros: [],
                    sexos: [],
                },
                admins: [],
                solicitacao: this.$models.solicitacao(),
                results: [],
                resultsAguardando: [],
                resultsVerificando: [],
                resultsFinalizadas: [],
                resultsAgendadas: [],
                totalAguardando: 0,
                totalVerificando: 0,
                totalFinalizadas: 0,
                totalAgendadas: 0,
                cards: [],
                city: "",
                dia:"",
                hora:"",
                horaStart:"08:00",
                horaEnd:"17:30",
                dataVisitalabel: "sem agenda",
                adminSelecionado: { id: 0, nome: "Todos captadores", email: "" },
                idAdminSelecionado: 0,
                idAdminRealocar: 0,
                optionRealocar: { id: 0, nome: "Próximo da fila", email: "" },
                agenda: { data: new Date(1900, 1, 0, 0, 0, 0, 0), hora: null, obs: "" },
                dateStart: new Date(),


            }
        }, computed: {},
        props: {},
        watch: {
        },
        created: function () {

            this.$root.SetTitle("Solicitações", "fa fa-bell-concierge", null);

            this.admins = (this.$root.admins.filter(a => !a.god && !a.gestor));
            this.admins.unshift({ id: 0, nome: "Todos captadores" });

        },
        mounted() {



            this.Enviar();



            $(document).keydown((e) => {
                // c(this.$router.currentRoute._rawValue.path)
                if (this.$router.currentRoute._rawValue.path == "/solicitacoes")
                    return this.Update(e);
                //else
                //    this.$root.RouteTo("home");
            });

            // window.setInterval(() => this.AutoUpdate(), 10000);
            this.SetUpdateTime();

            this.RefreshAdmins();

        }, beforeUnmount() {
            clearInterval(this.update.interval);
        },
        methods: {


            async RefreshAdmins() {
                try {
                    this.$root.admins = (await this.$root.$api.Get("admin/obter/todos")).result;
                    this.admins = (this.$root.admins.filter(a => !a.god && !a.gestor));
                    this.adminSelecionado = { id: 0, nome: "Todos captadores", email: "" }
                    this.admins.unshift(this.adminSelecionado);
                } catch (e) { }
            },


            SetUpdateTime() {
                clearInterval(this.update.interval);
                if (this.update.timeSelected.value > 0)
                    this.update.interval = window.setInterval(() => this.AutoUpdate(), this.update.timeSelected.value);
            },

            AutoUpdate() {
                //c("AutoUpdate");
                if (this.update.auto) {
                    this.update.inBG = (this.tab == "verificando" || this.tab == "finalizadas");
                    this.Enviar();
                }
            },

            Update(e) {
                try {
                    if (e.keyCode == 116)
                        this.Enviar();
                } catch (e) { ce("" + e); }
                return (e.which || e.keyCode) != 116;
            },


            ShowView(v) {
                this.view = v;
            },


            GetDateHourLabel(item) {
                var hoje = new Date();
                var dataItem = new Date(item.data);
                var label = "";
                var dias = Math.ceil(Math.abs(hoje - dataItem) / (1000 * 60 * 60 * 24));
                var diffHours = Math.ceil(Math.abs(hoje - dataItem) / (1000 * 60 * 60));
                var label = "";

                if (dias == 0)
                    label = "<b>Hoje às " + dataItem.getHours() + ':' + dataItem.getMinutes() + "h</b> ( há " + diffHours + "h)";
                else
                    label = "Há " + dias + " dias";
                //label += dataItem.getHours() + ':' + dataItem.getMinutes() + " há " + diffHours + "h";
                return label;
            },

            UpdateChart() {
                if (this.tab == "distribuicao")
                    window.setTimeout(() => this.$refs.distribuicao.BuildChart(this.resultsAguardando, this.resultsVerificando, this.resultsFinalizadas, this.adminSelecionado), 1000);
            },

            async Enviar() {

                if (this.view != "request") {


                    if (!this.update.inBG) {
                        var tabbk = this.tab;
                        this.tab = null;
                        this.view = "request";
                    }

                    var url = "solicitacao/obter/todos/admin/" + this.idAdminSelecionado;

                    var request = await this.$api.Get(url);

                    var count=0;

                    if (request.status.success) {

                        this.results = request.result;

                        this.results.forEach(i => {
                            //if(i.id == 10606){
                            //    c2("dataVisita   antes",i.dataVisita )
                            //    i.dataVisita        = this.$tools.DateFix(i.dataVisita     );
                            //    c2("dataVisita  depois",i.dataVisita )
                            //}else
                            i.data              = this.$tools.DateFix(i.data             );
                            i.dataVisita        = this.$tools.DateFix(i.dataVisita       );
                            i.dataAgendamento   = this.$tools.DateFix(i.dataAgendamento  );
                            i.dataReagendamento = this.$tools.DateFix(i.dataReagendamento);
                            i.dataConfirmado    = this.$tools.DateFix(i.dataConfirmado   );
                            i.dataVisitado      = this.$tools.DateFix(i.dataVisitado     );
                            i.dataConcluido     = this.$tools.DateFix(i.dataConcluido    );

                            i.acao      =   'abrir-agenda';
                            i.acaocard  =   'fechar-card'  + i.id;

                            i.dia  = i.dataVisita.format('yyyy/mm/dd');
                            i.hora = this.$tools.FormatHour(i.dataVisita);

                            // i.proprietarioCaptacao = "Teste, (11) 98498-4894, paulogneto@gmail.com";
                            if (this.$validator.is(i.proprietarioCaptacao)) {
                                var fields = i.proprietarioCaptacao.split(",");
                                i.proprietario.nome      = this.$validator.is(fields[0]) ? fields[0] : null;
                                i.proprietario.email     = this.$validator.is(fields[1]) ? fields[1] : null;
                                i.proprietario.telefone  = this.$validator.is(fields[2]) ? fields[2] : null;
                                i.proprietario.telefone2 = this.$validator.is(fields[3]) ? fields[3] : null;
                                i.proprietario.telefone3 = this.$validator.is(fields[4]) ? fields[4] : null;
                            }
                        });

                        var newAguardando = this.results.filter(r => r.idStatus == 3);
                        var aguardandoIguais = ((newAguardando.length <= this.resultsAguardando.length) && (newAguardando.every((v, i) => (v.id) === this.resultsAguardando[i].id)));

                        //c2("this.results.filter", this.results.filter(r => r.idStatus == 3));
                        //c2("this.resultsAguardando", this.resultsAguardando);

                        this.resultsAguardando  = this.results.filter(r => r.idStatus == 3);
                        this.resultsVerificando = this.results.filter(r => r.idStatus == 5);
                        this.resultsFinalizadas = this.results.filter(r => r.idStatus == 9 || r.idStatus == 10 || r.idStatus == 11);

                        this.totalAguardando  = this.resultsAguardando.length;
                        this.totalVerificando = this.resultsVerificando.length;
                        this.totalFinalizadas = this.resultsFinalizadas.length;

                        this.resultsAgendadas = this.resultsAguardando.filter(r => r.agendado == true);
                        this.totalAgendadas = this.resultsAgendadas.length;

                        if (!this.update.inBG) {
                            this.somenteAgendadas = false;
                            this.idAdminSelecionado = 0;
                            if (this.$validator.is(tabbk))
                                this.tab = tabbk;
                            else
                                this.tab = (this.$root.usuario.god || this.$root.usuario.gestor) ? "distribuicao" : "aguardando";

                            window.setTimeout(() => { this.UpdateChart(); }, 2000);
                            this.view = "success";

                        } else {
                            if (!aguardandoIguais)
                                this.$tools.Notification("solicitação aguardando", "Nova");
                        }

                    }//else
                    //  this.view = "fail";

                }


            },


            FiltrarPorAdmin(idAdmin) {
                this.FiltrarAguardando(idAdmin);
                this.FiltrarVerificando(idAdmin);
                this.FiltrarFinalizadas(idAdmin);
                this.adminSelecionado = this.admins.find(a => a.id == idAdmin);
                //c2("this.adminSelecionado ", this.adminSelecionado)
                try {
                    this.$refs.distribuicao.BuildChart(this.resultsAguardando, this.resultsVerificando, this.resultsFinalizadas, this.adminSelecionado);
                } catch (e) { }
            },
            FiltrarAguardando(idAdmin) {
                this.resultsAguardando = this.FiltrarSolicitacoes(idAdmin, 3);
                this.totalAguardando = this.resultsAguardando.length;
            },
            FiltrarVerificando(idAdmin) {
                this.resultsVerificando = this.FiltrarSolicitacoes(idAdmin, 5);
                this.totalVerificando = this.resultsVerificando.length;
            },
            FiltrarFinalizadas(idAdmin) {
                this.resultsFinalizadas = this.FiltrarSolicitacoes(idAdmin, 9);
                this.totalFinalizadas = this.resultsFinalizadas.length;
            },
            FiltrarSolicitacoes(idAdmin, idStatus) {
                var res = [];
                if (idStatus == 9) {
                    res = (idAdmin > 0 && this.somenteAgendadas) ? this.results.filter(r => (r.idStatus == idStatus || r.idStatus == 10 || r.idStatus == 11) && r.ativo && r.idAdmin == idAdmin && r.agendado == true) :
                        (idAdmin > 0) ? this.results.filter(r => (r.idStatus == idStatus || r.idStatus == 10 || r.idStatus == 11) && r.ativo && r.idAdmin == idAdmin) :
                            (this.somenteAgendadas) ? this.results.filter(r => (r.idStatus == idStatus || r.idStatus == 10 || r.idStatus == 11) && r.ativo && r.agendado == true) :
                                this.results.filter(r => (r.idStatus == idStatus || r.idStatus == 10 || r.idStatus == 11) && r.ativo);
                } else {
                    res = (idAdmin > 0 && this.somenteAgendadas) ? this.results.filter(r => r.idStatus == idStatus && r.ativo && r.idAdmin == idAdmin && r.agendado == true) :
                        (idAdmin > 0) ? this.results.filter(r => r.idStatus == idStatus && r.ativo && r.idAdmin == idAdmin) :
                            (this.somenteAgendadas) ? this.results.filter(r => r.idStatus == idStatus && r.ativo && r.agendado == true) :
                                this.results.filter(r => r.idStatus == idStatus && r.ativo);
                }
                return res;
            },

            async Captar(item) {
                item.acao = 'captar';
                item.dataVisita = new Date(item.dataVisita).toISOString();
                var request = await this.$api.Post("solicitacao/captar", item);
                if (request?.status?.success) {
                    item.acao = 0;
                    this.$tools.MessageSuccess("SOLICITAÇÃO #" + item.id + " captada em verificação!");
                    request.result.dataVisita = new Date(request.result.dataVisita);
                    request.result.acaocard = 'abrir-card' + request.result.id;
                    this.resultsVerificando.unshift(request.result);
                    this.totalAguardando--;
                    this.totalVerificando++;
                    item.ativo = false;
                    this.tab = "verificando";
                    this.$tools.Top();
                }
            },

            async Reavaliar(item) {
                item.acao = 'reavaliar';
                var request = await this.$api.Post("solicitacao/captar", item);
                if (request?.status?.success) {
                    item.acao = 0;
                    //this.$tools.AlertSuccess("SOLICITAÇÃO #" + item.id + " captada em verificação!");
                    this.$tools.MessageSuccess("SOLICITAÇÃO #" + item.id + " captada em verificação!");
                    request.result.dataVisita = new Date(request.result.dataVisita);
                    request.result.acaocard = 'abrir-card' + request.result.id;
                    this.resultsVerificando.unshift(request.result);
                    this.totalFinalizadas--;
                    this.totalVerificando++;
                    window.setTimeout(() => this.$refs["avaliacao" + request.result.id].focus(), 500);
                    item.ativo = false;
                    this.tab = "verificando";
                    this.$tools.Top();
                    //c(this.results);
                }//else
                //  this.view = "fail";
            },

            async RealocarNaFila(item) {
                item.acao = 'realocar';
                var request = await this.$api.Post("solicitacao/realocar/fila", item);
                if (request?.status?.success) {
                    item.acao = request.result.acao = 0;
                    this.$tools.AlertSuccess("<b>SOLICITAÇÃO #" + item.id + "</b> realocada para <br><b>" + request.result.admin.nome + "</b> captador #" + request.result.admin.id + "<br> em AGUARDANDO.");
                    request.result.dataVisita = new Date(request.result.dataVisita);
                    if (item.idStatus == 3) {
                        item = request.result;
                        this.resultsAguardando.find(a => a.id == item.id).idAdmin = item.idAdmin;
                        this.resultsAguardando.find(a => a.id == item.id).admin = item.admin;
                        //c2("ITEM",item)
                    } else {
                        this.resultsAguardando.unshift(request.result);
                        this.totalVerificando--;
                        this.totalAguardando++;
                        item.ativo = false;
                    }
                    //this.resultsVerificando = this.results.filter(r => r.id != item.id && r.idStatus == 5);
                    //this.resultsFinalizadas = this.results.filter(r => r.id != item.id && r.idStatus == 9);
                    //c(this.results);
                }//else
                //  this.view = "fail";
            },

            async RealocarParaAdmin(item) {

                if (this.idAdminRealocar == 0)
                    this.RealocarNaFila(item);
                else {

                    item.admin = this.$root.admins.filter(a => a.id == this.idAdminRealocar)[0];
                    item.idAdmin = this.idAdminRealocar;

                    item.acao = 'realocaradmin';
                    var request = await this.$api.Post("solicitacao/realocar/admin", item);
                    if (request?.status?.success) {
                        item.acao = request.result.acao = 0;
                        this.$tools.AlertSuccess("<b>SOLICITAÇÃO #" + item.id + "</b> realocada para <br><b>" + request.result.admin.nome + "</b> captador #" + request.result.admin.id + "<br> em AGUARDANDO.");
                        request.result.dataVisita = new Date(request.result.dataVisita);
                        if (item.idStatus == 3) {
                            item = request.result;
                            this.resultsAguardando.find(a => a.id == item.id).idAdmin = item.idAdmin;
                            this.resultsAguardando.find(a => a.id == item.id).admin = item.admin;
                            //c2("ITEM",item)
                        } else {
                            this.resultsAguardando.unshift(request.result);
                            this.totalVerificando--;
                            this.totalAguardando++;
                            item.ativo = false;
                        }
                    }
                }
            },

            async RealocarFinalizada(item) {
                item.acao = 'realocar';
                var request = await this.$api.Post("solicitacao/realocar", item);
                if (request?.status?.success) {
                    item.acao = request.result.acao = 0;
                    this.$tools.AlertSuccess("<b>SOLICITAÇÃO #" + item.id + "</b> realocada para <br><b>" + request.result.admin.nome + "</b> captador #" + request.result.admin.id + "<br> em AGUARDANDO.");
                    request.result.dataVisita = new Date(request.result.dataVisita);
                    this.resultsAguardando.unshift(request.result);
                    this.totalFinalizadas--;
                    this.totalAguardando++;
                    //this.resultsVerificando = this.results.filter(r => r.id != item.id && r.idStatus == 5);
                    //this.resultsFinalizadas = this.results.filter(r => r.id != item.id && r.idStatus == 9);
                    item.ativo = false;
                    //c(this.results);
                }//else
                //  this.view = "fail";
            },

            async Cancelar(item) {
                item.acao = 'cancelar';
                var request = await this.$api.Post("solicitacao/cancelar", item);
                if (request?.status?.success) {
                    item.acao = request.result.acao = 0;
                    this.$tools.AlertSuccess("SOLICITAÇÃO #" + item.id + " voltou para o status de aguardada.");
                    request.result.dataVisita = new Date(request.result.dataVisita);
                    this.resultsAguardando.unshift(request.result);
                    this.totalVerificando--;
                    this.totalAguardando++;
                    //this.resultsVerificando = this.results.filter(r => r.id != item.id && r.idStatus == 5);
                    //this.resultsFinalizadas = this.results.filter(r => r.id != item.id && r.idStatus == 9);
                    item.ativo = false;
                    //c(this.results);
                }//else
                //  this.view = "fail";
            },

            async Alterar(item) {
                item.acao = 'alterar';
                //c2("item.dataVisita   antes",item.dataVisita )
                var request = await this.$api.Post("solicitacao/alterar", item);
                item.acao = 0;
                if (request?.status?.success) {
                    item = request.result;

                    item.dataVisita        = this.$tools.DateFix(item.dataVisita     );
                    //c2("item.dataVisita  depois",item.dataVisita )

                    item.dataAgendamento   = this.$tools.DateFix(item.dataAgendamento);
                    item.dataReagendamento = this.$tools.DateFix(item.dataVisita     );
                    item.dataConfirmado    = this.$tools.DateFix(item.dataConfirmado );
                    item.dataVisitado      = this.$tools.DateFix(item.dataVisitado   );
                    item.dataConcluido     = this.$tools.DateFix(item.dataConcluido  );
                    item.acao = 0;
                    this.$tools.AlertSuccess("SOLICITAÇÃO #" + item.id + " salva!");
                    //c(this.results);
                }//else
                //  this.view = "fail";
            },


            async FinalizarComoLocalizado(item) {
                item.idStatus = 10;
                item.status = "Localizado";
                this.Finalizar(item);
            },

            async FinalizarComoNaoLocalizado(item) {
                item.idStatus = 11;
                item.status = "Não localizado";
                this.Finalizar(item);
            },

            async Finalizar(item) {
                item.acao = 'finalizar';
                item.dataVisita = new Date(new Date(item.dataVisita        ).toISOString()); // new Date(item.dataVisita).toISOString();
                var request = await this.$api.Post("solicitacao/finalizar", item);
                if (request?.status?.success) {
                    item.acao = 0;
                    this.$tools.AlertSuccess("SOLICITAÇÃO #" + item.id + " finalizada!");
                    request.result.dataVisita = new Date(new Date(request.result.dataVisita).toISOString());
                    this.resultsFinalizadas.unshift(request.result);
                    this.totalVerificando--;
                    this.totalFinalizadas++;
                    item.ativo = false;
                    //c(this.results);
                }//else
                //  this.view = "fail";
            },



            async BuscarEndereco(item) {

                if (this.cep.numero !== item.cep) {

                    this.carregandoCEP = true;
                    this.carregandoEstados = true;
                    this.carregandoCidades = true;
                    this.carregandoBairros = true;

                    this.cep.cidade = item.cidade = "";
                    this.cep.logradouro = item.logradouro = "";
                    this.cep.bairro = item.bairro = "";
                    this.cep.estado = item.estado = "";

                    item.cep = this.cep.numero;
                    let res = await this.$sdata.BuscarEndereco(this.cep.numero);

                    if (this.$validator.is(res?.city)) {
                        this.cep.cidade = item.cidade = res.city;
                        this.cep.logradouro = item.logradouro = res.address;
                        this.cep.bairro = item.bairro = res.neighborhood;
                        this.cep.estado = item.estado = res.state;
                    }

                    this.carregandoCEP = false;
                    this.carregandoEstados = false;
                    this.carregandoCidades = false;
                    this.carregandoBairros = false;

                    this.$refs["endereconumero" + item.id].focus();
                }
            },

            async BuscarCep(item) {
                var endereco = item.estado + "/" + item.cidade.replaceAll(" ", "%20") + "/" + item.logradouro.replaceAll(" ", "%20")
                let res = await this.$sdata.BuscarCep(endereco);
                return res.cep;
            },



            ObterCidades(estado, item) {

                item.cidade = item.bairro = "";
                item.idCidade = item.idBairro = 0;

                this.opcoes.bairros = [];
                this.opcoes.cidades = [];
                var cidades = [];

                if (this.$validator.is(estado)) {
                    this.carregandoCidades = true;
                    item.idEstado = this.opcoes.estados.filter((e) => e.uf == estado)[0].id;
                    this.$sdata.ObterCidades(item.idEstado).then(res => { this.carregandoCidades = false; this.opcoes.cidades = res; });
                }

            },


            ObterBairros(cidade, item) {

                item.bairro = "";
                item.idBairro = 0;

                this.opcoes.bairros = [];
                var bairros = [];

                if (this.$validator.is(cidade)) {
                    this.carregandoBairros = true;
                    item.idCidade = this.opcoes.cidades.filter((c) => c.nome == cidade)[0].id;
                    this.$sdata.ObterBairros(item.idCidade).then(res => { this.carregandoBairros = false; this.opcoes.bairros = res; });
                }

            },

            DefinirBairro(bairro, item) {
                item.idBairro = this.opcoes.bairros.filter((c) => c.nome == bairro)[0].id;
                //this.$refs.logradouro.focus();
                //this.solicitacao.bairro = bairro.label;
                //c2("this.solicitacao", this.solicitacao);
            },





            FormatarDataVisita(item) {

                var dia = null;
                var hora = null;

                if (this.$validator.is(this.agenda.data)) {
                    dia = new Date(this.agenda.data);
                    item.dataVisita = new Date(dia.toUTCString());

                    if (this.$validator.not(this.agenda.hora))
                        this.agenda.hora = new Date(1900, 0, 1, 16, 0, 0, 0);

                    hora = new Date(this.agenda.hora);
                    dia.setHours((hora.getHours()), hora.getMinutes(), 0, 0);
                    //this.dataVisitaLabel = dia.format("dd/mm/yyyy, HH:MM'h'");

                } else {
                    item.dataVisita = new Date(1900, 0, 1, 0, 0, 0, 0);
                    //this.dataVisitaLabel = "";
                    this.agenda.hora = null;
                }


                if (this.$validator.is(this.agenda.hora)) {

                    hora = new Date(this.agenda.hora);
                    item.dataVisita.setHours(hora.getHours(), hora.getMinutes(), 0, 0);
                    //item.dataVisita.setHours((hora.getHours() - 3), hora.getMinutes(), 0, 0);

                    dia.setHours((hora.getHours()), hora.getMinutes(), 0, 0);
                    //this.dataVisitaLabel = dia.format("dd/mm/yyyy, ddd, HH:MM'h'");
                }


            },


            ProcessarDataReagendamento(item) {

                if(this.$validator.is(item.dia) && this.$validator.is(item.hora) ){

                       item.dataReagendamento = item.dataVisita = new Date( Date.UTC(
                             parseInt(item.dia.split("/")[0]), 
                            (parseInt(item.dia.split("/")[1]) - 1), 
                             parseInt(item.dia.split("/")[2]), 
                             parseInt(item.hora.split(":")[0]), 
                             parseInt(item.hora.split(":")[1]), 
                            0, 0)
                        );
                       
                    }
                },


        }

    }

</script>


<style scoped>
    .s-input {
        margin-bottom: 20px;
    }

    .el-input {
        --el-input-height: 32px;
    }

    .el-input__inner {
        font-size: 13px;
    }

    input-group__prepend {
        font-size: 12px;
    }

    .el-input-group__prepend {
        font-size: 12px;
    }
</style>


