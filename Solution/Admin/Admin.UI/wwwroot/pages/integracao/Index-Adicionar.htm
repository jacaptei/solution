<template>
    <div>
        <el-row @keyup.enter="Buscar()">
            <el-col :md="24">
                <el-row :gutter="20">
                    <el-col :xs="24" :sm="12" :md="8" :lg="8" class="s-input">
                        <div>CHAVE API<span></span></div>
                        <el-input-number style="width:100%" @keyup.enter="Enviar()" v-model="id" placeholder="qualquer" maxlength="20" ref="id" :controls="false"></el-input-number>
                    </el-col>
                    <el-col :xs="24" :sm="12" :md="8" :lg="8" class="s-input">
                        <div>CRM<span></span></div>
                        <el-select value-key="id" filterable class="m-4" size="large" style="width: 100%">
                            <el-option placeholder="qualquer"></el-option>
                        </el-select>
                    </el-col>
                    <el-col :xs="24" :sm="12" :md="8" :lg="8" class="s-input">
                        <div>CRM<span></span></div>
                        <el-select value-key="id" filterable class="m-4" size="large" style="width: 100%">
                            <el-option placeholder="qualquer"></el-option>
                        </el-select>
                    </el-col>
                    <el-col :xs="24" :sm="12" :md="8" :lg="8" class="s-input">
                        <div>CÓDIGO USUÁRIO IMOVIEW<span></span></div>
                        <el-select v-else v-model="" filterable class="m-4" placeholder="qualquer" size="large" style="width:100%" @change="(item)=>{}">
                            <el-option placeholder="qualquer"></el-option>
                        </el-select>
                    </el-col>
                    <el-col :xs="24" :sm="12" :md="8" :lg="8" class="s-input">
                        <div>UNIDADE<span></span></div>
                        <el-select v-else v-model="" multiple filterable :clearable="true" class="m-4" placeholder="qualquer" size="large" style="width:100%">
                            <el-option placeholder="qualquer"></el-option>
                        </el-select>
                    </el-col>
                    <el-col :xs="24" :sm="12" :md="8" :lg="8" class="s-input">
                        <div>SELECIONE O PLANO</div>
                        <el-select filterable style="width: 100%" placeholder="SELECIONAR">
                            <el-option v-for="item in planos" :key="item.value" :label="item.label" :value="item.value"></el-option>
                        </el-select>
                    </el-col>
                </el-row>

                <el-button type="primary" @click="addLocationGroup">Adicionar Localização</el-button>
                <el-row :gutter="20">
                    <div style="width: 100%; display: flex; flex-wrap: wrap">
                        <div style="width: 50%; display: flex" v-for="(group, index) in locationGroups" :key="index" class="location-group">
                            <el-row :gutter="20">
                                <el-col :xs="24" :sm="24" :md="12" :lg="12" class="s-input">
                                    <div><p>ESTADO</p></div>
                                    <div style="height:40px" v-if="group.carregandoEstados">
                                        <c-loading size="30px" style="padding-left:5px"></c-loading>
                                    </div>
                                    <el-select v-else filterable v-model="group.selectedEstado" class="m-4" placeholder="Selecionar" size="large" style="width:100%" @change="(value) => { ObterCidades(value, index); group.enableFilterButton = true; }">
                                        <el-option v-for="item in opcoes.estados" :key="item.id" :label="item.label" :value="item.id"></el-option>
                                    </el-select>
                                </el-col>
                                <el-col :xs="24" :sm="24" :md="12" :lg="12" class="s-input">
                                    <div><p>CIDADE</p></div>
                                    <div style="height:40px" v-if="group.carregandoCidades">
                                        <c-loading size="30px" style="padding-left:5px"></c-loading>
                                    </div>
                                    <el-select multiple v-else v-model="group.selectedCities" filterable class="m-4" placeholder="Selecionar" size="large" style="width:100%" @change="(cities) => ObterBairros(cities, index)">
                                        <el-option v-for="item in group.cidades" :key="item.id" :label="item.label" :value="item"></el-option>
                                    </el-select>
                                </el-col>
                                <el-col :xs="24" :sm="24" :md="24" :lg="24" v-for="cidade in group.selectedCities" :key="cidade.id" class="container-checkbox">
                                    <div>BAIRROS - {{ cidade.label }}</div>
                                    <el-scrollbar height="400px">
                                        <el-checkbox-group v-model="group.checkedBairros[cidade.id]" class="checkbox-group" @change="handleCheckboxChange">
                                            <div class="checkbox-container">
                                                <el-checkbox v-for="bairro in group.bairros[cidade.id]" :key="bairro.id" :label="bairro" class="checkbox-item">
                                                    {{ bairro.label }}
                                                </el-checkbox>
                                            </div>
                                        </el-checkbox-group>
                                    </el-scrollbar>
                                </el-col>
                            </el-row>
                        </div>
                    </div>
                </el-row>

                <el-row style="width: 100%; display: flex; justify-content: flex-end; align-items: center;">
                    <el-col :xs="24" :sm="12" :md="8" :lg="6" class="s-input" style="width: 100%; display: flex; justify-content: flex-end; align-items: center;">
                        <div><span></span></div>
                        <q-btn label="INTEGRAR" color="primary" @click="BuscarProprietario()"></q-btn>
                        <span style="cursor:pointer; padding-left:20px; color:var(--s-color-green)" @click="LimparFiltro"><i class="fa fa-cancel"></i> LIMPAR REGISTRO</span>
                    </el-col>
                </el-row>
                <el-row justify="center" v-if="onrequest">
                    <el-col :md="24" style="color:var(--s-color-primary)">
                        <el-divider style="margin:10px;"><!--resultado--></el-divider>
                        <c-loading padding="20px"></c-loading>
                    </el-col>
                </el-row>
            </el-col>
        </el-row>
    </div>
</template>


<script>
    import { ref } from 'vue';
    module.exports = {
        name: 'Buscar',
        data() {
            return {
                onrequest: false,
                busca: this.$models.busca(),
                carregandoCidades: false,
                id: null,
                selectedEstado: null,
                estados: [],
                cidades: [],
                bairros: [],
                selectedCities: [],
                bairrosByCity: {},
                group:[],
                checkedBairros: {},
                bairrosSelecionados: {},
                bairrosIds: [],
                locationGroups: [],
                opcoes: {
                    estados: [],
                    cidades: [],
                    bairros: [],
                },
                planos: [
                    { label: 'CORRETOR AUTÔNOMO ESSENCIAL por R$387/mês', value: 2 },
                    { label: 'IMOBILIÁRIA ATÉ 03 USUÁRIOS por R$499/mês', value: 3 },
                    { label: 'IMOBILIÁRIA ATÉ 05 USUÁRIOS por R$699/mês', value: 4 },
                ],
                integracao: {
                    id: 0,
                    idCliente: 60,
                    idOperador: 3,
                    dataInclusao: "",
                    dataAtualizacao: null,
                    codUsuario: "",
                    codUnidade: "",
                    chaveApi: "",
                    idPlano: 5,
                    status: "",
                    bairros: this.checkedBairros,
                    imoveis: null
                }
            }
        },
        created() {
            this.proprietario = this.$models.usuario();
            this.$sdata.ObterEstados().then(res => { this.opcoes.estados = res; });
        }, methods: {
            LimparFiltro() {
                this.id = null;
                this.busca.item = this.$models.proprietario();
                this.Enviar();
            },
            addLocationGroup() {
                this.locationGroups.push({
                    selectedEstado: null,
                    selectedCities: [],
                    carregandoEstados: false,
                    carregandoCidades: false,
                    enableFilterButton: false,
                    checkedBairros: {},
                    bairros: {},
                    cidades: [],
                });
            },
            ObterCidades(estadoId, groupIndex) {
                this.locationGroups[groupIndex].carregandoCidades = true;
                this.$sdata.ObterCidades(estadoId).then(res => {
                    this.locationGroups[groupIndex].cidades = res;
                    this.locationGroups[groupIndex].carregandoCidades = false;
                });
            },
            ObterBairros(cities, groupIndex) {
                this.group = this.locationGroups[groupIndex];
                cities.forEach(cidade => {
                    this.$sdata.ObterBairros(cidade.id).then(res => {
                        if (!this.group.bairros[cidade.id]) {
                            this.group.bairros[cidade.id] = res;
                        }
                    });
                });
            },
            handleCheckboxChange() {
                this.integracao.bairros = this.checkedBairros;
            },
            Buscar() {
                this.onrequest = true;
                this.$refs.id.blur();
                this.$sdata.buscarProprietario(this.integracao).then(res => {
                    this.proprietario = res;
                    this.onrequest = false;
                }).catch(error => {
                    this.onrequest = false;
                    console.error(error);
                });
            }
        }
    }
</script>


<style>
    .container-checkbox {
        letter-spacing: 0.02em;
        color: #0072ff !important;
        font-size: 0.9em;
        font-weight: 600;
        margin-top: 20px;
    }

    .checkbox-group {
        display: flex;
        flex-wrap: wrap;
        letter-spacing: 0.02em;
        color: #0072ff !important;
        font-size: 0.9em;
        font-weight: 600;
    }

    .checkbox-container {
        display: flex;
        flex-wrap: wrap;
    }

    .checkbox-item {
        width: calc(50% - 10px);
        box-sizing: border-box;
        margin-right: 10px;
        margin-bottom: 10px;
        font-size: 12px;
        white-space: normal;
        line-height: 1.5;
        overflow-wrap: break-word;
    }

    @media (max-width: 992px) {
        .checkbox-item {
            width: calc(33.33% - 10px);
        }
    }

    @media (max-width: 768px) {
        .checkbox-item {
            width: calc(50% - 10px);
        }
    }

    @media (max-width: 576px) {
        .checkbox-item {
            width: calc(100% - 10px);
        }
    }

    .el-scrollbar__thumb {
        width: 5px !important;
        height: 12px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #0072ff;
        border-radius: 6px;
    }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #0056b3;
        }

    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 6px;
    }
</style>