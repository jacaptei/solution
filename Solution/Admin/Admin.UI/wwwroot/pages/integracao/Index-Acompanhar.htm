<template>
    <div v-loading.fullscreen.lock="fullscreenLoading" element-loading-background="rgba(0, 0, 0, 0.7)">
        <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 30px;">
            <div style="line-height: 1.6; font-size: 18px; color: #0072ff">
                Você está vizualizando as Importações do <strong>{{ crmTitle }}</strong>.
                <!--<br />
                Foram importados <strong>{{ totalImoveis }} imóveis</strong> {{verificarStatusBairro}}.-->
            </div>

            <div style="display: flex; align-items: center; gap: 8px;">
                <el-icon @click="abrirModalFiltro" style="cursor: pointer; color: #409EFF; font-size: 24px;">
                    <Filter />
                </el-icon>

                <el-icon @click="refreshData" style="cursor: pointer; color: #409EFF; font-size: 24px;">
                    <Refresh />
                </el-icon>


                <el-select v-model="refreshInterval"
                           placeholder="Selecione o intervalo"
                           size="small"
                           style="width: 140px;"
                           @change="startAutoRefresh">
                    <el-option v-for="item in optionsRefresh"
                               :key="item.value"
                               :label="item.label"
                               :value="item.value" />
                </el-select>

                <el-button type="primary"
                           size="small"
                           round
                           @click="openDialogReprocessarIntegracao">
                    <div style="display: flex; width: 100%; align-content: center">
                        <div style="display: flex; width: 100%; align-items: center">
                            Reprocessar Integração
                        </div>
                        <div style="display: flex; width: 100%; justify-content: center">
                            <el-icon style="cursor: pointer; color: #ffffff; font-size: 18px;">
                                <Refresh />
                            </el-icon>
                        </div>
                    </div>
                </el-button>
            </div>
        </div>

        <!-- Tabela principal de Integrações -->
        <el-table :data="acompanhar" table-layout="auto" :header-cell-style="{ fontWeight: 'bold' }" :row-class-name="setRowClass">
            <!-- Coluna expansível de Integrações -->
            <el-table-column type="expand">
                <template #default="props">
                    <el-card :style="{ borderColor: '#b1b1b1', borderWidth: '1px', height: auto, borderStyle: 'solid'}" shadow="never">
                        <!-- Tabela de Bairros dentro da Integração -->
                        <el-table :data="props.row.bairros" height="auto" table-layout="auto" :header-cell-style="{ fontWeight: 'bold' }">
                            <!-- Coluna expansível de Bairros -->
                            <el-table-column type="expand">
                                <template #default="bairroScope">
                                    <!-- Tabela de Imóveis dentro de cada Bairro -->
                                    <el-card :style="{ borderColor: '#b1b1b1', borderWidth: '1px', borderStyle: 'solid'}" shadow="never">
                                        <transition name="fade" mode="out-in">
                                            <el-table :data="bairroScope.row.bairro.imoveis" max-height="650" table-layout="auto" :header-cell-style="{ fontWeight: 'bold' }" fixed-header>
                                                <el-table-column label="ID da Importação" prop="id" align="center" />
                                                <el-table-column label="Código do Imóvel JaCaptei" prop="cod" align="center" />
                                                <el-table-column :label="crmLabel" align="center">
                                                    <template #default="scope">
                                                        <div v-if="crmLabel == 'Código do Imóvel Imoview'">
                                                            {{ getResponse(scope.row).codigo }}
                                                        </div>
                                                        <div v-if="crmLabel == 'Código do Imóvel VistaSoft'">
                                                            {{ getResponse(scope.row).Codigo }}
                                                        </div>
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Data de Importação" prop="data" width="150" align="center">
                                                    <template #default="scope">
                                                        {{ formatarDataHora(scope.row.data) }}
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Resposta" align="center">
                                                    <template #default="scope">
                                                        <div v-if="getResponse(scope.row).erro">
                                                            <span class="error">Erro: {{ getResponse(scope.row).mensagem || 'Erro desconhecido' }}</span>
                                                            <el-icon v-else-if="scope.row.status === 'Erro'">
                                                                <CircleCloseFilled color="red" />
                                                            </el-icon>
                                                        </div>
                                                        <div v-else>
                                                            <span>
                                                                {{ getResponse(scope.row).mensagem || scope.row.status }}
                                                                <el-icon v-if="scope.row.status === 'Concludo'">
                                                                    <SuccessFilled color="green" />
                                                                </el-icon>
                                                                <el-icon v-else-if="scope.row.status === 'Concluído com Falhas'">
                                                                    <WarnTriangleFilled color="orange" />
                                                                </el-icon>
                                                                <el-icon v-else-if="scope.row.status === 'Processando'">
                                                                    <LoadingFilled color="blue" />
                                                                </el-icon>
                                                                <el-icon v-else-if="scope.row.status === 'Aguardando'">
                                                                    <ClockFilled color="yellow" />
                                                                </el-icon>
                                                            </span>
                                                        </div>
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Atualizado Em" prop="atualizadoEm" align="center">
                                                    <template #default="scope">
                                                        {{ formatarDataHora(scope.row.atualizadoEm) }}
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Status" prop="status" align="center">
                                                    <template #default="scope">
                                                        <div style="display: flex; align-items: center; justify-content: center">
                                                            <div style="display: flex; align-items: center; justify-content: center">
                                                                <div v-if="!scope.row.imoviewResponse?.erro">
                                                                    <span style="margin-right: 5px;">
                                                                        <!-- Verificação para 'Processando' e 'Aguardando' -->
                                                                        <span v-if="scope.row.status === 'Processando'">O imóvel está sendo processado...</span>
                                                                        <span v-else-if="scope.row.status === 'Aguardando'">O imóvel está aguardando...</span>
                                                                        <span v-else>{{ scope.row.status }}</span>
                                                                    </span>
                                                                </div>
                                                                <div v-else>
                                                                    <span style="margin-right: 5px;" class="error">{{ scope.row.status }}</span>
                                                                </div>
                                                                <el-icon v-if="scope.row.status === 'Concluido'">
                                                                    <SuccessFilled color="green" />
                                                                </el-icon>
                                                                <el-icon v-else-if="scope.row.status === 'Erro'">
                                                                    <CircleCloseFilled color="red" />
                                                                </el-icon>
                                                                <el-icon v-else-if="scope.row.status === 'Processando'">
                                                                    <LoadingFilled color="blue" />
                                                                </el-icon>
                                                                <el-icon v-else-if="scope.row.status === 'Aguardando'">
                                                                    <ClockFilled color="yellow" />
                                                                </el-icon>
                                                            </div>
                                                        </div>
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Ação" align="center">
                                                    <template #default="scope">
                                                        <div style="display: flex; align-items: center; justify-content: center">
                                                            <el-tooltip v-if="['Aguardando', 'Processando', 'Erro'].includes(scope.row.status)"
                                                                        content="Reprocessar Integração"
                                                                        placement="top">
                                                                <el-icon class="el-icon--right icon-clickable"
                                                                         style="font-size: 24px; color: #0072FF;"
                                                                         @click="handleClick(scope.row)">
                                                                    <Refresh />
                                                                </el-icon>
                                                            </el-tooltip>
                                                        </div>
                                                    </template>
                                                </el-table-column>
                                            </el-table>
                                        </transition>
                                    </el-card>
                                </template>
                            </el-table-column>

                            <!-- Colunas de Bairros -->
                            <el-table-column label="Bairro" prop="bairro.nome" />
                            <el-table-column label="Quantidade de Imoveis" prop="totalImoveisBairro" align="center">
                                <template #default="bairroScope">
                                    {{ bairroScope.row.bairro.imoveis?.length }}
                                </template>
                            </el-table-column>
                            <el-table-column label="Status" align="center">
                                <template #default="bairroScope">
                                    <div style="display: flex; align-items: center; justify-content: center">
                                        <span style="margin-right:5px;">{{ bairroScope.row.status }}</span>
                                        <el-icon v-if="bairroScope.row.status === 'Concluído'">
                                            <SuccessFilled color="green" />
                                        </el-icon>
                                        <el-icon v-else-if="bairroScope.row.status === 'Concluído com Falhas'">
                                            <WarnTriangleFilled color="orange" />
                                        </el-icon>
                                        <el-icon v-else-if="bairroScope.row.status === 'Erro'">
                                            <CircleCloseFilled color="red" />
                                        </el-icon>
                                        <el-icon v-else-if="bairroScope.row.status === 'Processando'">
                                            <LoadingFilled color="blue" />
                                        </el-icon>
                                        <el-icon v-else-if="bairroScope.row.status === 'Aguardando'">
                                            <ClockFilled color="yellow" />
                                        </el-icon>
                                    </div>
                                </template>
                            </el-table-column>
                        </el-table>
                    </el-card>
                </template>
            </el-table-column>

            <!-- Colunas principais da Integração -->
            <el-table-column label="Cliente" prop="cliente" />
            <el-table-column label="Plano" prop="plano" />
            <el-table-column label="Data de Criação" prop="criadoEm">
                <template #default="scope">
                    {{ formatarDataHora(scope.row.criadoEm) }}
                </template>
            </el-table-column>
            <el-table-column label="Quantidade de Bairros Importados" prop="quantidadeBairros" align="center">
                <template #default="scope">
                    {{ quantidadeBairros }}
                </template>
            </el-table-column>
            <el-table-column label="Total de Imóveis Importados" prop="totalImoveis" align="center">
                <template #default="scope">
                    <span style="font-size: 16px;"><strong>{{ totalImoveis }}</strong></span>
                </template>
            </el-table-column>
            <el-table-column label="Última Atualização" prop="atualizadoEm" align="center">
                <template #default="scope">
                    {{ formatarDataHora(scope.row.atualizadoEm) }}
                </template>
            </el-table-column>
            <el-table-column label="Status" prop="status" align="center">
                <template #default="scope">
                    <div style="display: flex; align-items: center; justify-content: center">
                        <div style="display: flex; align-items: center; justify-content: center">
                            <span style="margin-right:5px;">{{ scope.row.status }}</span>
                            <el-icon v-if="scope.row.status === 'Concluido'">
                                <SuccessFilled color="green" />
                            </el-icon>
                            <el-icon v-else-if="scope.row.status === 'Concluído com Falhas'">
                                <WarnTriangleFilled color="orange" />
                            </el-icon>
                            <el-icon v-else-if="scope.row.status === 'Erro'">
                                <CircleCloseFilled color="red" />
                            </el-icon>
                            <el-icon v-else-if="scope.row.status === 'Processando'">
                                <LoadingFilled color="blue" />
                            </el-icon>
                            <el-icon v-else-if="scope.row.status === 'Aguardando'">
                                <ClockFilled color="yellow" />
                            </el-icon>
                        </div>
                    </div>
                </template>
            </el-table-column>
        </el-table>
    </div>

    <el-dialog v-model="filtrosVisiveis" title="Filtro" width="500" align-center>
        <div style="display: flex; width: 100%">
            <el-row gutter=20>
                <el-col :xs="24" :sm="24" :md="24" :lg="24" class="register-input">
                    <span>CRM</span>
                    <el-select v-model="listaCrmIntegracao"
                               @change="filtrarParceiroIntegracao" placeholder="Escolha o CRM" style="width: 100%">
                        <el-option v-for="item in crmOptions"
                                   :key="item.id"
                                   :label="item.nome"
                                   :value="item.id"
                                   :disabled="item.disabled" />
                    </el-select>
                </el-col>
                <el-col :xs="24" :sm="24" :md="24" :lg="24" class="register-input">
                    <span>Parceiro Integração</span>
                    <el-select :disabled="!isDisabled()" @change="mudancaParceiroIntegracao" v-model="listaIntegracao" placeholder="Escolha o Parceiro" style="width: 100%">
                        <el-option v-for="item in options" :key="item.value" :label="item.label" :value="item" />
                    </el-select>
                </el-col>
            </el-row>
        </div>

        <template #footer>
            <div class="dialog-footer">
                <el-button @click="fecharModal">Cancelar</el-button>
                <el-button type="primary" @click="Buscar">Aplicar Filtros</el-button>
            </div>
        </template>
    </el-dialog>
    
    <el-dialog v-model="reprocessarTodaAIntegracao" title="Filtro" width="500" align-center>
        <el-form :model="{ chaveApi, codUnidade, urlApi, codUsuario }" :rules="rules" ref="form">
            <div style="width: 100%; justify-content: center">
                <el-row gutter=20>
                    <el-col :xs="24" :sm="24" :md="24" :lg="24" class="register-input">
                        <div>CHAVE API<span></span></div>
                        <el-form-item prop="chaveApi"
                                      :rules="[{ required: true, message: 'Por favor, insira a Chave API', trigger: 'blur' }]">
                            <el-input style="width:100%"
                                      v-model="chaveApi"
                                      clearable
                                      placeholder="Insira sua Chave API"
                                      @change="handleChangeApiKey"></el-input>
                        </el-form-item>
                    </el-col>

                    <el-col v-if="isImoview" :xs="24" :sm="24" :md="12" :lg="12" class="register-input">
                        <div>UNIDADE<span></span></div>
                        <el-form-item prop="codUnidade"
                                      :rules="[{ required: true, message: 'Por favor, selecione a Unidade', trigger: 'blur' }]">
                            <el-select v-model="codUnidade"
                                       filterable
                                       :clearable="true"
                                       class="m-4"
                                       placeholder="INFORME A UNIDADE"
                                       size="large"
                                       style="width:100%">
                                <el-option v-for="item in listaUnidades" :key="item.id" :label="item.nome" :value="item.id"></el-option>
                            </el-select>
                        </el-form-item>
                    </el-col>

                    <el-col v-if="isImoview" :xs="24" :sm="24" :md="12" :lg="12" class="register-input">
                        <div>CÓDIGO USUÁRIO IMOVIEW<span></span></div>
                        <el-form-item prop="codUsuario"
                                      :rules="[{ required: true, message: 'Por favor, insira o Código de Usuário', trigger: 'blur' }]">
                            <el-input style="width:100%"
                                      clearable
                                      v-model="codUsuario"
                                      :placeholder="placeholderUsuarioText"></el-input>
                        </el-form-item>
                    </el-col>

                    <el-col v-if="isVistaSoft" :xs="24" :sm="24" :md="24" :lg="24" class="register-input">
                        <div>URL VISTASOFT<span></span></div>
                        <el-form-item prop="urlApi"
                                      :rules="[{ required: true, message: 'Por favor, insira a URL de Integração', trigger: 'blur' }]">
                            <el-input style="width:100%"
                                      v-model="urlApi"
                                      clearable
                                      :placeholder="placeholderUrlVistaSoft"></el-input>
                        </el-form-item>
                    </el-col>
                </el-row>
            </div>
        </el-form>

        <template #footer>
            <div class="dialog-footer">
                <el-button @click="fecharModal">Cancelar</el-button>

                <el-button v-if="salvarMudancasReprocessamento"
                           type="primary"
                           @click="submitForm(SalvarAlteracoes)">
                    Salvar Alterações
                </el-button>

                <el-button v-if="!salvarMudancasReprocessamento"
                           type="primary"
                           @click="submitForm(ReprocessarIntegracao)">
                    Reprocessar
                </el-button>
            </div>
        </template>
    </el-dialog>
</template>

<script>
    import { ref, onMounted, getCurrentInstance, watch, onBeforeUnmount } from 'vue';
    export default {
        setup() {
            const urlApi = ref('');
            const options = ref({});
            const documento = ref('');
            const crmTitle = ref('');
            const chaveApi = ref('');
            const codUsuario = ref('');
            const codUnidade = ref('');
            const acompanhar = ref([]);
            const totalImoveis = ref(0);
            const listaUnidades = ref([]);
            const changedFields = ref([]);
            const responseProp = ref('');
            const form = ref(null);
            const isImoview = ref(false);
            const collapseItems = ref([]);
            const isVistaSoft = ref(false);
            const crmSelecionado = ref('');
            const unidades = ref([]);
            const urlApiChanged = ref([]);
            const initialValuesLoaded = ref(true);
            const refreshInterval = ref(0);
            const salvarMudancasReprocessamento = ref(false);
            const listaIntegracao = ref([]);
            const quantidadeBairros = ref(0);
            const filtrosVisiveis = ref(false);
            const listaCrmIntegracao = ref([]);
            const idParceiroIntegracao = ref('');
            const urlStatusIntegracao = ref('');
            const fullscreenLoading = ref(false);
            const instance = getCurrentInstance();
            const idIntegracao = ref('');
            const reprocessarTodaAIntegracao = ref(false);
            let intervalId = null;
            const crmLabel = ref("");
            const crmOptions = ref([
                { nome: 'IMOVIEW', id: 1 },
                { nome: 'VISTASOFT', id: 2 },
            ]);
            const optionsRefresh = ref([
                { label: 'Desativar', value: 0 },
                { label: '5 segundos', value: 5 },
                { label: '10 segundos', value: 10 },
                { label: '30 segundos', value: 30 },
                { label: '1 minuto', value: 60 },
                { label: '2 minutos', value: 120 },
                { label: '5 minutos', value: 300 },
                { label: '10 minutos', value: 600 },
            ]);

            const getResponse = (imovel) => {
                const response = imovel[responseProp.value] || {};

                if (typeof response === 'string') {
                    try {
                        const parsed = JSON.parse(response);
                        if (parsed.message === 'Ok') parsed.message = 'Concluído';
                        return parsed;
                    } catch (e) {
                        console.error('Erro ao parsear JSON:', e);
                        return {};
                    }
                }
                return response;
            };

            watch(acompanhar, (newVal) => {
                totalImoveis.value = newVal.reduce((total, integracao) => {
                    return total + integracao.bairros.reduce((bairroTotal, bairro) => {
                        return bairroTotal + (bairro.bairro.imoveis ? bairro.bairro.imoveis.length : 0);
                    }, 0);
                }, 0);

                quantidadeBairros.value = newVal[0]?.bairros.length || 0;
            }, { deep: true });

            watch(refreshInterval, (newValue) => {
                startAutoRefresh();
            });

            watch(chaveApi, (newValue) => {
                if (crmSelecionado.value === 1) {
                    handleChangeApiKey();
                }
            });

            watch(unidades, (newValue) => {
                if (Array.isArray(newValue)) {
                    initialValues.listaUnidades = newValue;
                    listaUnidades.value = initialValues.listaUnidades;
                } else {
                    console.warn("O valor de unidades não é um array:", newValue);
                }
            });

            watch(listaIntegracao, () => {
                if (crmSelecionado.value) {
                    filtrarStatusParceiroIntegracao(crmSelecionado.value);
                } else {
                    console.warn("CRM não está definido.");
                }
            });

            watch(crmSelecionado, (newVal) => {
                const isImoviewSelected = newVal === 1;
                const isVistasoftSelected = newVal === 2;

                crmLabel.value = isImoviewSelected
                    ? "Código do Imóvel Imoview"
                    : isVistasoftSelected
                        ? "Código do Imóvel VistaSoft"
                        : "";

                chaveApi.value = "";

                responseProp.value = isImoviewSelected
                    ? "imoviewResponse"
                    : isVistasoftSelected
                        ? "apiResponse"
                        : "";

                crmTitle.value = isImoviewSelected
                    ? "IMOVIEW"
                    : isVistasoftSelected
                        ? "VISTASOFT"
                        : "";

                isImoview.value = isImoviewSelected;
                isVistaSoft.value = isVistasoftSelected;
            });

            const handleFieldChange = () => {
                if (!initialValuesLoaded.value) return;

                changedFields.value = [];

                // Verifica mudanças nos campos do Imoview
                if (isImoview.value) {
                    if (chaveApi.value !== initialValues.chaveApi) {
                        changedFields.value.push({ campo: 'chaveApi', valor: chaveApi.value });
                    }
                    if (codUnidade.value !== initialValues.codUnidade) {
                        changedFields.value.push({ campo: 'codUnidade', valor: codUnidade.value });
                    }
                    if (codUsuario.value !== initialValues.codUsuario) {
                        changedFields.value.push({ campo: 'codUsuario', valor: codUsuario.value });
                    }
                    if (listaUnidades.value !== initialValues.listaUnidades) {
                        changedFields.value.push({ campo: 'listaUnidades', valor: listaUnidades.value });
                    }
                }

                // Verifica mudanças nos campos do VistaSoft
                if (isVistaSoft.value) {
                    if (chaveApi.value !== initialValues.chaveApi) {
                        changedFields.value.push({ campo: 'chaveApi', valor: chaveApi.value });
                    }
                    if (urlApi.value !== initialValues.urlApi) {
                        urlApiChanged.value = true;
                        changedFields.value.push({ campo: 'urlApi', valor: urlApi.value });
                    }
                }

                if (changedFields.value.length > 0) {
                    salvarMudancasReprocessamento.value = true;
                    console.log("Campos alterados:", changedFields.value);
                } else {
                    salvarMudancasReprocessamento.value = false;
                }
            };

            watch(codUnidade, (newValue) => {
                handleFieldChange();
            });

            watch(codUsuario, (newValue) => {
                handleFieldChange();
            });

            watch(urlApi, (newValue) => {
                if (newValue) {
                    handleChangeApiKey();
                    handleFieldChange();
                }
            });

            watch(chaveApi, (newValue) => {
                handleFieldChange();
            });

            const initialValues = {
                urlApi: null,
                chaveApi: null,
                codUnidade: null,
                codUsuario: null,
                listaUnidades: null,
            };

            const mudancaParceiroIntegracao = () => {
                urlApi.value = "";
                chaveApi.value = "";
                codUnidade.value = "";
                codUsuario.value = "";
                listaUnidades.value = "";
            };

            const carregarDadosParceiroIntegracao = async () => {
                try {
                    const url = validarParceiroIntegracao(crmSelecionado.value);
                    const { data } = await axios.post(url, { cpfCnpj: documento.value });

                    initialValues.chaveApi = data.integracao.chaveApi;
                    initialValues.codUsuario = data.integracao.codUsuario;
                    initialValues.urlApi = data.integracao.urlApi || null;

                    chaveApi.value = initialValues.chaveApi;
                    codUsuario.value = initialValues.codUsuario;
                    urlApi.value = initialValues.urlApi;

                    initialValuesLoaded.value = true;

                } catch (error) {
                    console.error('Erro no reprocessamento:', error);
                }
            };

            const openDialogReprocessarIntegracao = async () => {
                try {
                    fullscreenLoading.value = true;
                    await carregarDadosParceiroIntegracao();
                    reprocessarTodaAIntegracao.value = true;
                    fullscreenLoading.value = false;
                } catch (error) {
                    fullscreenLoading.value = false;
                    console.error('Erro no reprocessamento:', error);
                }
            };

            const SalvarAlteracoes = async (payloadAlteracoes) => {
                try {
                    const url = validarUrlSalvarAlteracoes(crmSelecionado.value);

                    if (!payloadAlteracoes) {
                        throw new Error("Payload não foi gerado corretamente.");
                    }

                    const { data } = await axios.post(url, payloadAlteracoes);
                    ElementPlus.ElMessage.success("Alteração Salva com Sucesso!");
                    salvarMudancasReprocessamento.value = false;
                } catch (error) {
                    console.error("Erro no salvamento das alterações:", error);
                    ElementPlus.ElMessage.error("Erro ao salvar as alterações. Tente novamente mais tarde.");
                }
            };

            const ReprocessarIntegracao = async (payloadIntegracao) => {
                try {
                    fullscreenLoading.value = true;
                    const url = validarUrlReprocessarImovel(crmSelecionado.value);

                    if (!payloadIntegracao) {
                        throw new Error("Payload não foi gerado corretamente.");
                    }
                    fullscreenLoading.value = false;
                    return;
                    const { data } = await axios.post(url, payloadIntegracao);

                } catch (error) {
                    console.error("Erro ao Reprocessar a Integração:", error);
                    ElementPlus.ElMessage.error("Erro ao Reprocessar a Integração");
                }
            };

            const handleClick = async (row) => {
                try {
                    const urlReprocessamento = validarUrlParaReprocessarImovel(crmSelecionado.value);
                    const response = axios.post(urlReprocessamento, {
                        id: row.id,
                        cod: row.cod
                    });
                    if (response.data) {
                        ElementPlus.ElMessage.success('Imovel em Fila de Processamento!');
                    } else {
                        ElementPlus.ElMessage.error({
                            message: 'Oops, this is an error message.',
                            showClose: true,
                        });
                    }
                } catch (error) {
                    console.error('Erro no reprocessamento:', error);
                    ElementPlus.ElMessage.error('Erro ao reprocessar. Tente novamente mais tarde.');
                }
            };

            const handleChangeApiKey = async () => {
                if (!chaveApi.value) {
                    resetUnidade();
                    return;
                }

                if (crmSelecionado.value === 2 && !isUrlApiChanged()) {
                    console.log("URL não foi alterada. Não será necessário validar.");
                    return;
                }

                try {
                    fullscreenLoading.value = true;
                    const { data, status } = await fetchApiKeyValidation();

                    if (status !== 200) throw new Error('Resposta inválida da API.');

                    processApiResponse(data);
                } catch (error) {
                    handleApiError(error);
                } finally {
                    fullscreenLoading.value = false;
                }
            };

            const resetUnidade = () => {
                codUnidade.value = "";
            };

            const isUrlApiChanged = () =>
                changedFields.value.some(field => field.campo === 'urlApi');

            const fetchApiKeyValidation = async () => {
                const url = validarUrlParaValidarChaveApi(Number(crmSelecionado.value));
                return axios.get(url);
            };

            const processApiResponse = (data) => {
                if (crmSelecionado.value === 1) {
                    handleCrm1Response(data);
                } else if (crmSelecionado.value === 2) {
                    handleCrm2Response(data);
                }
            };

            const handleCrm1Response = (data) => {
                if (Array.isArray(data)) {
                    unidades.value = data;
                    const unidadeId = data[0]?.id || "";
                    initialValues.codUnidade = unidadeId;
                    codUnidade.value = unidadeId;
                } else {
                    ElementPlus.ElMessage.error('A resposta da API foi inválida.');
                }
            };

            const handleCrm2Response = (isValid) => {
                if (isValid) {
                    ElementPlus.ElMessage.success('Chave API e URL válidas!');
                } else {
                    ElementPlus.ElMessage.warning('Chave API ou URL inválida.');
                    urlApi.value = "";
                }
            };

            const handleApiError = (error) => {
                console.error("Erro ao verificar a chave API:", error);
                ElementPlus.ElMessage.error('Erro ao verificar a chave API. Tente novamente mais tarde.');
                codUnidade.value = "";
            };

            onMounted(() => {
                setTimeout(() => {
                    filtrosVisiveis.value = true;
                }, 300);
            });

            onBeforeUnmount(() => {
                stopAutoRefresh();
            });

            const abrirModalFiltro = () => {
                filtrosVisiveis.value = true;
            };

            const fecharModal = () => {
                filtrosVisiveis.value = false;
            };

            const filtros = ref({
                Integracao: 0,
                Cliente: '',
            });

            const submitForm = (action) => {
                form.value.validate((valid) => {
                    if (valid) {
                        const payload = isImoview.value ? createImoviewPayload(idIntegracao.value) : createVistaSoftPayload(idIntegracao.value);
                        action(payload);
                    } else {
                        console.error("Formulário inválido. Verifique se todos os campos estão preenchidos.");
                        ElementPlus.ElMessage.warning('Formulário inválido. Verifique os campos.');
                    }
                });
            };

            const createImoviewPayload = (id) => {
                if (!id) throw new Error("ID é obrigatório.");

                const payload = { id };

                changedFields.value.forEach(({ campo, valor }) => {
                    if (["codUsuario", "codUnidade", "chaveApi"].includes(campo)) {
                        payload[campo] = valor;
                    }
                });
                return payload;
            };

            const createVistaSoftPayload = (id) => {
                if (!id) throw new Error("ID é obrigatório.");

                const payload = { id };

                changedFields.value.forEach(({ campo, valor }) => {
                    if (["urlApi", "chaveApi"].includes(campo)) {
                        payload[campo] = valor;
                    }
                });
                return payload;
            };

            const startAutoRefresh = () => {
                if (intervalId) clearInterval(intervalId);
                if (refreshInterval.value > 0) {
                    intervalId = setInterval(refreshData, refreshInterval.value * 1000);
                }
            };

            const stopAutoRefresh = () => {
                if (intervalId) {
                    clearInterval(intervalId);
                    intervalId = null;
                }
            };

            const filtrarParceiroIntegracao = async (crm) => {
                crmSelecionado.value = crm;
                const url = validarUrlParaBuscarParceiroIntegracao(crm);
                if (!url) {
                    console.error("URL inválida para o parceiro de integração.");
                    return;
                }
                listaIntegracao.value = [];
                await getListaIntegracoes(url);
                isDisabled();
            };

            const filtrarStatusParceiroIntegracao = async (crm) => {
                urlStatusIntegracao.value = validarUrlParaBuscarStatusIntegracao(crm);
                if (!urlStatusIntegracao.value) {
                    console.error("URL inválida para o parceiro de integração.");
                    return;
                }
                isDisabled();
            };

            const isDisabled = () => {
                return listaCrmIntegracao.value === 1 || listaCrmIntegracao.value === 2;
            };

            const formatarData = (dataISO) => {
                if (!dataISO) return '';
                const data = new Date(dataISO);
                return data.toLocaleDateString('pt-BR', { timeZone: 'UTC' });  // Formato dd/mm/aaaa
            };

            const formatarHorario = (dataISO) => {
                if (!dataISO) return '';
                const data = new Date(dataISO);
                return data.toLocaleTimeString('pt-BR', { timeZone: 'UTC', hour: '2-digit', minute: '2-digit' });  // Formato HH:mm
            };

            const formatarDataHora = (dataISO) => {
                const data = new Date(dataISO);
                const dataUTC3 = new Date(data.getTime() - (data.getTimezoneOffset() * 60000)); // Converter para UTC-3
                const dataFormatada = dataUTC3.toLocaleDateString('pt-BR');
                const horarioFormatado = dataUTC3.toLocaleTimeString('pt-BR', {
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZone: 'America/Sao_Paulo'
                });
                return `${dataFormatada} às ${horarioFormatado}`;
            };

            const validarUrlParaBuscarParceiroIntegracao = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL("api/imoview/integracao/listar");
                    case 2:
                        return instance.proxy.$api.BuildURL("api/vistasoft/integracao/listar");
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const validarUrlParaBuscarStatusIntegracao = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL("api/imoview/integracao/status");
                    case 2:
                        return instance.proxy.$api.BuildURL("api/vistasoft/integracao/status");
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const validarUrlParaValidarChaveApi = (crm) => {
                if (!chaveApi.value) {
                    console.error("Chave API não está definida.");
                    return null;
                }
                const chaveApiEncoded = encodeURIComponent(chaveApi.value);
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL(`api/imoview/unidades?chave=${chaveApiEncoded}`);
                    case 2:
                        return instance.proxy.$api.BuildURL(`api/vistasoft/validarchave?chave=${chaveApiEncoded}&url=${urlApi.value}`);
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const validarPayload = (crm) => {
                switch (crm) {
                    case 1:
                        return createImoviewPayload(idIntegracao.value);
                    case 2:
                        return createVistaSoftPayload(idIntegracao.value);
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const validarParceiroIntegracao = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL('api/imoview/integracao/cliente');
                    case 2:
                        return instance.proxy.$api.BuildURL('api/vistasoft/integracao/cliente');
                    default:
                        throw new Error('CRM inválido');
                }
            };

            const validarUrlParaReprocessarImovel = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL("api/imoview/integracao/cliente/reprocessarimovel");
                    case 2:
                        return instance.proxy.$api.BuildURL("api/vistasoft/integracao/cliente/reprocessarimovel");
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const validarUrlSalvarAlteracoes = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL("api/imoview/integracao/cliente/atualizarcampos");
                    case 2:
                        return instance.proxy.$api.BuildURL("api/vistasoft/integracao/cliente/atualizarcampos");
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const validarUrlReprocessarImovel = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL("api/imoview/integracao/cliente/reprocessar");
                    case 2:
                        return instance.proxy.$api.BuildURL("api/vistasoft/integracao/cliente/reprocessar");
                    default:
                        console.error("CRM inválido:", crm);
                        return null;
                }
            };

            const verificarStatusBairro = (bairro) => {
                const imoveis = bairro?.bairro?.imoveis;
                let erroReq = ""
                if (!imoveis) {
                    return erroReq = "Erro";
                }

                const temErro = imoveis.some(imovel => getResponse(imovel).erro);
                const temSucesso = imoveis.some(imovel => !getResponse(imovel).erro);
                const temPendente = imoveis.some(imovel => imovel.status === 'Aguardando');
                const emProcessamento = imoveis.some(imovel => imovel.status === 'Processando');

                if (emProcessamento) return 'Processando';
                if (temErro && temSucesso) return 'Concluído com Falhas';
                if (temErro || erroReq) return 'Erro';
                if (temPendente) return 'Aguardando';
                return 'Concluído';
            };

            const verificarStatusIntegracao = (integracao) => {
                let statusIntegracao = "Concluido";
                let temParcial = false;
                let aguardando = false;
                let emProcessamento = false;

                integracao.bairros.forEach(bairro => {
                    const statusBairro = verificarStatusBairro(bairro);
                    if (statusBairro === "Erro") {
                        statusIntegracao = "Erro";
                    } else if (statusBairro === "Concluído com Falhas") {
                        temParcial = true;
                    } else if (statusBairro === "Aguardando") {
                        aguardando = true;
                    }
                    else if (statusBairro === "Processando") {
                        emProcessamento = true;
                    }
                });

                if (aguardando) return "Aguardando";
                if (emProcessamento) return "Processando";
                if (temParcial) return "Concluído com Falhas";
                return statusIntegracao;
            };

            const refreshData = async () => {
                await Buscar();
            };

            const Buscar = async () => {
                try {
                    fullscreenLoading.value = true;
                    filtros.value.Integracao = listaIntegracao.value.value;
                    filtros.value.Cliente = listaIntegracao.value.label;
                    const response = await axios.post(urlStatusIntegracao.value, filtros.value);
                    acompanhar.value = [response.data];
                    idIntegracao.value = acompanhar.value[0].integracao;
                    quantidadeBairros.value = acompanhar.value[0].bairros.length;
                    documento.value = acompanhar.value[0].cpfCnpj;
                    acompanhar.value = acompanhar.value.map(integracao => {
                        return {
                            ...integracao,
                            status: verificarStatusIntegracao(integracao),
                            bairros: integracao.bairros.map(bairro => {
                                return {
                                    ...bairro,
                                    status: verificarStatusBairro(bairro)
                                };
                            })
                        };
                    });
                    totalImoveis.value = acompanhar.value.reduce((total, integracao) => {
                        if (Array.isArray(integracao.bairros) && integracao.bairros.length > 0) {
                            return total + integracao.bairros.reduce((bairroTotal, bairro) => {
                                return bairroTotal + (Array.isArray(bairro.bairro.imoveis) ? bairro.bairro.imoveis.length : 0);
                            }, 0);
                        }
                        return total;
                    }, 0);

                } catch (error) {
                    console.error("Erro ao buscar integração:", error);
                } finally {
                    filtrosVisiveis.value = false;
                    fullscreenLoading.value = false;;
                }
            };

            

            const getListaIntegracoes = async (url) => {
                try {
                    const { data } = await axios.get(url);
                    options.value = data.map(item => ({
                        value: item.integracao,
                        label: item.cliente
                    }));
                } catch (error) {
                    console.error('Erro ao buscar integrações:', error);
                }
            };

            return {
                acompanhar,
                filtrosVisiveis,
                filtros,
                Buscar,
                idIntegracao,
                listaIntegracao,
                options,
                abrirModalFiltro,
                formatarData,
                formatarHorario,
                formatarDataHora,
                fecharModal,
                crmOptions,
                listaCrmIntegracao,
                filtrarParceiroIntegracao,
                isDisabled,
                totalImoveis,
                quantidadeBairros,
                refreshData,
                fullscreenLoading,
                optionsRefresh,
                startAutoRefresh,
                refreshInterval,
                crmSelecionado,
                crmLabel,
                getResponse,
                crmTitle,
                handleClick,
                ReprocessarIntegracao,
                reprocessarTodaAIntegracao,
                urlApi,
                chaveApi,
                codUsuario,
                codUnidade,
                isImoview,
                isVistaSoft,
                listaUnidades,
                mudancaParceiroIntegracao,
                salvarMudancasReprocessamento,
                SalvarAlteracoes,
                openDialogReprocessarIntegracao,
                submitForm,
                form,
            };
        },
    };
</script>

<style>
    .el-card__body {
        padding: 10px;
    }

    .icon-clickable {
        cursor: pointer;
    }

    .el-scrollbar__thumb {
        margin-left: 10px;
    }

    .error {
        color: red;
    }

    .el-dialog__title {
        color: #0072ff;
    }

    .custom-success {
        background-color: #4caf50; /* Verde */
        color: white; /* Texto branco */
    }

    .custom-warning {
        background-color: #ff9800; /* Laranja */
        color: black; /* Texto branco */
    }

    .custom-error {
        background-color: #f44336; /* Vermelho */
        color: white; /* Texto branco */
    }

    .el-message el-message--error is-closable {
        background-color: #fef0f0 !important;
        border-color: #fbc4c4 !important;
        color: #f56c6c !important;
    }
</style>