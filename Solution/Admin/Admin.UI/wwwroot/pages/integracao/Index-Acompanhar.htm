<template>
    <div>
        <!-- O botão de "Filtrar" ainda está presente, mas o diálogo já abrirá automaticamente -->
        <el-button type="primary" @click="abrirModalFiltro">Filtro</el-button>

        <!-- Tabela principal de Integrações -->
        <el-table :data="acompanhar" style="width: 100%">
            <!-- Coluna expansível de Integrações -->
            <el-table-column type="expand">
                <template #default="props">
                    <el-card :style="{ borderColor: '#f5eeeb', borderWidth: '1px', borderStyle: 'solid'}" shadow="never">
                        <!-- Tabela de Bairros dentro da Integração -->
                        <el-table class="no-bottom-border" :data="props.row.bairros" style="width: 100%">
                            <!-- Coluna expansível de Bairros -->
                            <el-table-column type="expand">
                                <template #default="bairroScope">
                                    <!-- Tabela de Imóveis dentro de cada Bairro -->
                                    <el-card :style="{ borderColor: '#b1b1b1', borderWidth: '1px', borderStyle: 'solid', maxHeight: '400px', overflow: 'hidden' }" shadow="never">
                                        <transition name="fade" mode="out-in">
                                            <el-table :data="bairroScope.row.bairro.imoveis" height="350" style="width: 100%">
                                                <el-table-column label="ID da Importação" prop="id" />
                                                <el-table-column label="Código do Imóvel JaCaptei" prop="cod" />
                                                <el-table-column label="Código do Imóvel Imoview" prop="imoviewResponse.codigo" />
                                                <el-table-column label="Data" prop="data">
                                                    <template #default="scope">
                                                        {{ formatarDataHora(scope.row.data) }}
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Status" prop="status" />
                                                <el-table-column label="Atualizado Em" prop="atualizadoEm">
                                                    <template #default="scope">
                                                        {{ formatarDataHora(scope.row.atualizadoEm) }}
                                                    </template>
                                                </el-table-column>
                                                <el-table-column label="Resposta">
                                                    <template #default="scope">
                                                        <div v-if="!scope.row.imoviewResponse.erro">
                                                            {{ scope.row.imoviewResponse.mensagem }}
                                                        </div>
                                                        <div v-else>
                                                            <span class="error">Erro: {{ scope.row.imoviewResponse.mensagem }}</span>
                                                        </div>
                                                    </template>
                                                </el-table-column>
                                            </el-table>
                                        </transition>
                                    </el-card>
                                </template>
                            </el-table-column>

                            <!-- Colunas de Bairros -->
                            <el-table-column label="Bairro" prop="bairro.nome" />
                        </el-table>
                    </el-card>
                </template>
            </el-table-column>

            <!-- Colunas principais da Integração -->
            <el-table-column label="Cliente" prop="cliente" />
            <el-table-column label="Plano" prop="plano" />
            <el-table-column label="Data de Criação" prop="criadoEm">
                <template #default="scope">
                    {{ formatarDataHora(scope.row.criadoEm) }}
                </template>
            </el-table-column>
            <el-table-column label="Última Atualização" prop="atualizadoEm">
                <template #default="scope">
                    {{ formatarDataHora(scope.row.atualizadoEm) }}
                </template>
            </el-table-column>

        </el-table>
    </div>

    <el-dialog v-model="filtrosVisiveis" title="Filtro" width="500" align-center>
        <div style="display: flex; width: 100%">
            <el-row gutter=20>
                <el-col :xs="24" :sm="24" :md="24" :lg="24" class="register-input">
                    <span>Integração CRM</span>
                    <el-select v-model="listaCrmIntegracao" @change="filtrarParceiroIntegracao" placeholder="Escolha o CRM" style="width: 100%">
                        <el-option v-for="item in crmOptions"
                                   :key="item.id"
                                   :label="item.nome"
                                   :value="item.id" />
                    </el-select>
                </el-col>
                <el-col :xs="24" :sm="24" :md="24" :lg="24" class="register-input">
                    <span>Integração Parceiro</span>
                    <el-select :disabled="!isDisabled()" v-model="listaIntegracao" placeholder="Escolha o Parceiro" style="width: 100%">
                        <el-option v-for="item in options" :key="item.value" :label="item.label" :value="item" />
                    </el-select>
                </el-col>
            </el-row>
        </div>

        <template #footer>
            <div class="dialog-footer">
                <el-button @click="fecharModal">Cancelar</el-button>
                <el-button type="primary" @click="Buscar">Aplicar Filtros</el-button>
            </div>
        </template>
    </el-dialog>
</template>

<script>
    import { ref, onMounted, getCurrentInstance } from 'vue';
    export default {
        setup() {
            const collapseItems = ref([]);
            const idIntegracao = ref(null);
            const listaIntegracao = ref([]);
            const listaCrmIntegracao = ref([]);
            const filtrosVisiveis = ref(false);
            const instance = getCurrentInstance();
            const options = ref({});
            const crmOptions = ref([
                { nome: 'IMOVIEW', id: 1 },
                { nome: 'VISTASOFT', id: 2 },
            ]);
            const acompanhar = ref([]);

            onMounted(() => {
                setTimeout(() => {
                    filtrosVisiveis.value = true;
                }, 300);
            });

            const abrirModalFiltro = () => {
                filtrosVisiveis.value = true;
            };

            const fecharModal = () => {
                filtrosVisiveis.value = false;
            };

            const filtros = ref({
                Integracao: 0,
                Cliente: '',
            });

            const filtrarParceiroIntegracao = async (crm) => {
                const url = validarUrlParaBuscarParceiroIntegracao(crm);
                if (!url) {
                    console.error("URL inválida para o parceiro de integração.");
                    return;
                }
                await getListaIntegracoes(url);
                isDisabled();
            };

            const isDisabled = () => {
                return listaCrmIntegracao.value === 1 || listaCrmIntegracao.value === 2;
            };

            const validarUrlParaBuscarParceiroIntegracao = (crm) => {
                switch (crm) {
                    case 1:
                        return instance.proxy.$api.BuildURL("api/imoview/integracao/listar"); // Retorna a URL
                    case 2:
                        return instance.proxy.$api.BuildURL("api/vistasoft/integracao/listar"); // Retorna a URL
                    default:
                        console.error("CRM inválido:", crm); // Log de erro
                        return null; // Retorna null para indicar um erro
                }
            };

            const Buscar = async () => {
                try {
                    filtros.value.Integracao = listaIntegracao.value.value;
                    filtros.value.Cliente = listaIntegracao.value.label;
                    const url = instance.proxy.$api.BuildURL("api/imoview/integracao/status");
                    const response = await axios.post(url, filtros.value);
                    acompanhar.value = [response.data];
                } catch (error) {
                    console.error("Erro ao buscar integração:", error);
                } finally {
                    filtrosVisiveis.value = false;
                }
            };

            const formatarData = (dataISO) => {
                if (!dataISO) return '';
                const data = new Date(dataISO);
                return data.toLocaleDateString('pt-BR', { timeZone: 'UTC' });  // Formato dd/mm/aaaa
            };

            const formatarHorario = (dataISO) => {
                if (!dataISO) return '';
                const data = new Date(dataISO);
                return data.toLocaleTimeString('pt-BR', { timeZone: 'UTC', hour: '2-digit', minute: '2-digit' });  // Formato HH:mm
            };

            const formatarDataHora = (dataISO) => {
                const data = new Date(dataISO);

                const dataUTC3 = new Date(data.getTime() - (data.getTimezoneOffset() * 60000)); // Converter para UTC-3

                const dataFormatada = dataUTC3.toLocaleDateString('pt-BR');

                const horarioFormatado = dataUTC3.toLocaleTimeString('pt-BR', {
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZone: 'America/Sao_Paulo'
                });

                return `${dataFormatada} às ${horarioFormatado}`;
            };

            const getListaIntegracoes = async (url) => {
                try {
                    const { data } = await axios.get(url); // Desestrutura o response
                    options.value = data.map(item => ({
                        value: item.integracao,
                        label: item.cliente
                    }));
                } catch (error) {
                    console.error('Erro ao buscar integrações:', error);
                }
            };

            return {
                acompanhar,
                filtrosVisiveis,
                filtros,
                Buscar,
                idIntegracao,
                listaIntegracao,
                options,
                abrirModalFiltro,
                formatarData,
                formatarHorario,
                formatarDataHora,
                fecharModal,
                crmOptions,
                listaCrmIntegracao,
                filtrarParceiroIntegracao,
                isDisabled
            };
        },
    };
</script>

<style>
    .el-card__body {
        padding: 10px;
    }

    .error {
        color: red;
    }

    .el-dialog__title {
        color: #0072ff;
    }
</style>